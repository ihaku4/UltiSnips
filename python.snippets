snippet unit "unittest"

import unittest


class Test(unittest.TestCase):
    def setUp(self):
        ${1:self.s = Solution()}
        pass

    def test_default_case(self):
        self.assertEqual(True, True)
        self.assertTrue(True)
        self.assertEqual($2, self.s.${3})

if __name__ == '__main__':
    unittest.main()
endsnippet

snippet "bi(narytree)?" "binary tree builder & printer" br
from binary_tree_builder import BinaryTree
from binary_tree_printer import BinaryTreePrinter

import unittest


class Test(unittest.TestCase):
    def setUp(self):
        self.s = Solution()
        self.bt = BinaryTree()
        self.bp = BinaryTreePrinter()
        self.bp.printStructureLine = False
        serials = ['{1,2,2,3,3,3,3,4,4,4,4,4,4,#,#,5,5} ',
                   '{1111111111111,2,2,3,3333333,3,3,4,44444444444,44,4444,4,4,#,#,5,5} ',
                   '{1, #, 2, #, 3}', 
                   ]
        self.cases = {}
        for serial in serials:
            root = self.bt.deserialize(serial)
            # self.bp.printTree(root)
            treeGraph = self.bp.drawTreeGraphByString(root)
            self.cases[root] = treeGraph.count('\n')
        pass

    def test_default_case(self):
        self.assertEqual(True, True)
        self.assertTrue(True)
        for c in self.cases:
            graph = self.bp.drawTreeGraphByString(c)
            print graph
            # print graph.encode('hex')
            # print len(graph)
            # print self.bp._lineWidth
	    print self.s$1
            # self.assertEqual(self.cases[c], self.s{$1})}

if __name__ == '__main__':
    unittest.main()
endsnippet
